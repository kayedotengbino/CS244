Approach for 2SAT
    1: Express CNF as an implication
    2: Create an implication graph which has 2 edge for every clause of 
        the CNF

Kosaraju's Idea
    1: Call DFS(G) to compute finish time for each vertex
    2: Compute G transpose
    3: Call DFS(G transpose) on vertices in decreasing order of their 
        finish times
    4: output: Vertices as separate SCC's

Kosaraju's Algorithm Process O(V+E)/O(N+E)
    1: Create an empty stack 'S'
    2: Do DFS traversal of a graph. In DFS traversal, after calling
        recursive DFS for adjacvent vertices of a vertex, push the vertex 
        to stack
    3: Reverse directions of all arcs to obtain the transpose graph
    4: One by one pop a vertex from S while S is not empty. Let the popped
        vertex be 'v'. Take v as source and do DFS call on v. The DFS 
        starting from v prints strongly connected component of v
